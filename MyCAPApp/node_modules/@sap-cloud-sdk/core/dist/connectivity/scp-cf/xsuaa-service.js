"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.headerForClientCredentials = exports.fetchVerificationKeys = exports.jwtBearerTokenGrant = exports.refreshTokenGrant = exports.userTokenGrant = exports.clientCredentialsGrant = void 0;
var util_1 = require("@sap-cloud-sdk/util");
var axios_1 = __importDefault(require("axios"));
var opossum_1 = __importDefault(require("opossum"));
var http_client_1 = require("../../http-client");
var resilience_options_1 = require("./resilience-options");
var proxy_util_1 = require("./proxy-util");
var logger = util_1.createLogger({
    package: 'core',
    messageContext: 'xsuaa-service'
});
var circuitBreaker;
/**
 * Executes a client credentials grant request.
 * If the first parameter is an instance of [[XsuaaServiceCredentials]], the response's access_token will be verified.
 * If the first parameter is an URI, the response will not be verified.
 *
 * @param tokenServiceUrlOrXsuaaServiceCredentials - The URL of the token service or the credentials of a XSUAA service instance.
 * @param clientCredentials - Client credentials for which to request a token
 * @param options - Options to use by retrieving access token
 * @param customBody - Object containing value required for the body request
 * @returns A promise resolving to the response
 */
function clientCredentialsGrant(tokenServiceUrlOrXsuaaServiceCredentials, clientCredentials, options, customBody) {
    if (customBody === void 0) { customBody = {}; }
    var authHeader = headerForClientCredentials(clientCredentials);
    var body = __assign({ grant_type: GrantType.CLIENT_CREDENTIALS }, customBody);
    return post(tokenServiceUrlOrXsuaaServiceCredentials, authHeader, objectToXWwwUrlEncodedBodyString(body), options)
        .then(function (resp) { return resp.data; })
        .catch(function (error) {
        return Promise.reject(accessTokenError(error, GrantType.CLIENT_CREDENTIALS));
    });
}
exports.clientCredentialsGrant = clientCredentialsGrant;
/**
 * @deprecated Since v1.41.0 Use [[jwtBearerTokenGrant]] instead.
 * Executes a user token grant request against the given URI.
 *
 * @param tokenServiceUrlOrXsuaaServiceCredentials - The URL of the token service or the credentials of a XSUAA service instance.
 * @param userJwt - The JWT of the user on whose behalf the request is executed.
 * @param clientId - The client_id of the target XSUAA service instance.
 * @param options - Options to use by retrieving access token
 * @returns A promise resolving to the response of the XSUAA service.
 */
function userTokenGrant(tokenServiceUrlOrXsuaaServiceCredentials, userJwt, clientId, options) {
    var authHeader = 'Bearer ' + userJwt;
    var body = objectToXWwwUrlEncodedBodyString({
        client_id: clientId,
        grant_type: GrantType.USER_TOKEN,
        response_type: 'token'
    });
    return post(tokenServiceUrlOrXsuaaServiceCredentials, authHeader, body, options)
        .then(function (resp) { return resp.data; })
        .catch(function (error) {
        return Promise.reject(accessTokenError(error, GrantType.USER_TOKEN));
    });
}
exports.userTokenGrant = userTokenGrant;
/**
 * @deprecated Since v1.41.0 Use [[jwtBearerTokenGrant]] instead.
 * Executes a refresh token grant request against the given URI.
 * If the first parameter is an instance of [[XsuaaServiceCredentials]], the response's access_token will be verified.
 * If the first parameter is an URI, the response will not be verified.
 *
 * @param tokenServiceUrlOrXsuaaServiceCredentials - The URL of the token service or the credentials of a XSUAA service instance.
 * @param clientCredentials - The credentials (client_id, client_secret) of the target XSUAA service instance.
 * @param refreshToken - The refresh token that should be used to generate a new access token.
 * @param options - Options to use by retrieving access token.
 * @returns A promise resolving to the response of the XSUAA service.
 */
function refreshTokenGrant(tokenServiceUrlOrXsuaaServiceCredentials, clientCredentials, refreshToken, options) {
    var authHeader = headerForClientCredentials(clientCredentials);
    var body = objectToXWwwUrlEncodedBodyString({
        grant_type: GrantType.REFRESH_TOKEN,
        refresh_token: refreshToken
    });
    return post(tokenServiceUrlOrXsuaaServiceCredentials, authHeader, body, options)
        .then(function (resp) { return resp.data; })
        .catch(function (error) {
        return Promise.reject(accessTokenError(error, GrantType.REFRESH_TOKEN));
    });
}
exports.refreshTokenGrant = refreshTokenGrant;
/**
 * Executes a JWT bearer token grant request against the given URI.
 *
 * @param tokenServiceUrlOrXsuaaServiceCredentials - The URL of the token service or the credentials of a XSUAA service instance.
 * @param clientCredentials - The credentials (client_id, client_secret) of the target XSUAA service instance.
 * @param userJwt - The JWT of the user on whose behalf the request is executed.
 * @param options - Options to use by retrieving access token.
 * @returns A promise resolving to the response of the XSUAA service.
 */
function jwtBearerTokenGrant(tokenServiceUrlOrXsuaaServiceCredentials, clientCredentials, userJwt, options) {
    var authHeader = headerForClientCredentials(clientCredentials);
    var body = objectToXWwwUrlEncodedBodyString({
        client_id: clientCredentials.username,
        assertion: userJwt,
        grant_type: GrantType.JWT_BEARER_TOKEN,
        response_type: 'token'
    });
    return post(tokenServiceUrlOrXsuaaServiceCredentials, authHeader, body, options)
        .then(function (resp) { return resp.data; })
        .catch(function (error) {
        return Promise.reject(accessTokenError(error, GrantType.JWT_BEARER_TOKEN));
    });
}
exports.jwtBearerTokenGrant = jwtBearerTokenGrant;
function fetchVerificationKeys(xsuaaUriOrCredentials, clientIdOrJku, clientSecret) {
    // The case where the XsuaaServiceCredentials are given as object
    if (typeof xsuaaUriOrCredentials !== 'string') {
        if (!clientIdOrJku) {
            logger.warn('JKU field from the JWT not provided. Use xsuaaClient.url/token_keys as fallback. ' +
                'This will not work for subscriber accounts created after 14th of April 2020.' +
                'Please provide the right URL given by the field JKU present in the JWT header.');
        }
        return fetchVerificationKeys(clientIdOrJku || xsuaaUriOrCredentials.url + "/token_keys", xsuaaUriOrCredentials.clientid, xsuaaUriOrCredentials.clientsecret);
    }
    // The three strings case
    var config = {
        url: xsuaaUriOrCredentials,
        method: 'GET'
    };
    if (clientIdOrJku && clientSecret) {
        var authHeader = headerForClientCredentials({
            username: clientIdOrJku,
            password: clientSecret
        });
        config.headers = { Authorization: authHeader };
    }
    return axios_1.default
        .request(config)
        .then(function (resp) { return resp.data.keys.map(function (k) { return util_1.renameKeys(tokenKeyKeyMapping, k); }); })
        .catch(function (error) {
        throw new util_1.ErrorWithCause("Failed to fetch verification keys from XSUAA service instance " + xsuaaUriOrCredentials + "!", error);
    });
}
exports.fetchVerificationKeys = fetchVerificationKeys;
var tokenKeyKeyMapping = {
    kty: 'keyType',
    e: 'publicKeyExponent',
    use: 'use',
    kid: 'keyId',
    alg: 'algorithm',
    value: 'value',
    n: 'publicKeyModulus'
};
function post(tokenServiceUrlOrXsuaaServiceCredentials, authHeader, body, options) {
    if (options === void 0) { options = { enableCircuitBreaker: true }; }
    var config = wrapXsuaaPostRequestHeader(authHeader, body);
    var targetUri = typeof tokenServiceUrlOrXsuaaServiceCredentials === 'string'
        ? tokenServiceUrlOrXsuaaServiceCredentials
        : getTokenServiceUrl(tokenServiceUrlOrXsuaaServiceCredentials);
    var destination = { url: targetUri, proxyType: 'Internet' };
    if (proxy_util_1.proxyStrategy(destination) === proxy_util_1.ProxyStrategy.INTERNET_PROXY) {
        destination = proxy_util_1.addProxyConfigurationInternet(destination);
    }
    if (options.enableCircuitBreaker) {
        return getCircuitBreaker().fire(destination, config);
    }
    return http_client_1.executeHttpRequest(destination, config);
}
function wrapXsuaaPostRequestHeader(authHeader, body) {
    return {
        method: 'post',
        data: body,
        headers: {
            Authorization: authHeader,
            'Content-Type': 'application/x-www-form-urlencoded',
            Accept: 'application/json'
        }
    };
}
function headerForClientCredentials(clientCredentials) {
    return ('Basic ' +
        util_1.encodeBase64(clientCredentials.username + ":" + clientCredentials.password));
}
exports.headerForClientCredentials = headerForClientCredentials;
function objectToXWwwUrlEncodedBodyString(bodyAsObject) {
    return Object.entries(bodyAsObject)
        .map(function (kv) { return kv.join('='); })
        .join('&');
}
var GrantType;
(function (GrantType) {
    GrantType["USER_TOKEN"] = "user_token";
    GrantType["REFRESH_TOKEN"] = "refresh_token";
    GrantType["CLIENT_CREDENTIALS"] = "client_credentials";
    GrantType["JWT_BEARER_TOKEN"] = "urn:ietf:params:oauth:grant-type:jwt-bearer";
})(GrantType || (GrantType = {}));
function getTokenServiceUrl(xsuaaServiceCredentials) {
    var xsuaaUri = xsuaaServiceCredentials.url.replace(/\/$/, '');
    logger.info("Adding \"/oauth/token\" to the end of the target uri: " + xsuaaUri + ".");
    return xsuaaUri + "/oauth/token";
}
function accessTokenError(error, grant) {
    return new util_1.ErrorWithCause("FetchTokenError: " + grantTypeMapper[grant] + " Grant failed! " + error.message, error);
}
function getCircuitBreaker() {
    if (!circuitBreaker) {
        circuitBreaker = new opossum_1.default(http_client_1.executeHttpRequest, resilience_options_1.circuitBreakerDefaultOptions);
    }
    return circuitBreaker;
}
var grantTypeMapper = (_a = {},
    _a[GrantType.USER_TOKEN] = 'User token',
    _a[GrantType.REFRESH_TOKEN] = 'Refresh token',
    _a[GrantType.CLIENT_CREDENTIALS] = 'Client credentials',
    _a[GrantType.JWT_BEARER_TOKEN] = 'JWT token',
    _a);
//# sourceMappingURL=xsuaa-service.js.map